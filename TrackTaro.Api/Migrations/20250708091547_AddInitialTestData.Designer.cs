// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TrackTaro.Api.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20250708091547_AddInitialTestData")]
    partial class AddInitialTestData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ArtistDisc", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArtistsId", "DiscsId");

                    b.HasIndex("DiscsId");

                    b.ToTable("DiscArtists", (string)null);
                });

            modelBuilder.Entity("ArtistTrack", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TracksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArtistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("TrackArtists", (string)null);
                });

            modelBuilder.Entity("ItemArtist", b =>
                {
                    b.Property<int>("ArtistsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArtistsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("ItemArtists", (string)null);

                    b.HasData(
                        new
                        {
                            ArtistsId = -1,
                            ItemsId = -1
                        });
                });

            modelBuilder.Entity("Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiscId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscNumber")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiscId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 5, 43, 0),
                            Name = "Birds of Fire",
                            TrackNumber = 1,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 4, 39, 0),
                            Name = "Miles Beyond",
                            TrackNumber = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 2, 54, 0),
                            Name = "Celestial Terrestrial Commuters",
                            TrackNumber = 3,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 0, 22, 0),
                            Name = "Sapphire Bullets of Pure Love",
                            TrackNumber = 4,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 3, 20, 0),
                            Name = "Thousand Islad Park",
                            TrackNumber = 5,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -6,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 1, 57, 0),
                            Name = "Hope",
                            TrackNumber = 6,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -7,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 9, 55, 0),
                            Name = "One Word",
                            TrackNumber = 7,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -8,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 5, 2, 0),
                            Name = "Sanctuary",
                            TrackNumber = 8,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -9,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 3, 54, 0),
                            Name = "Open Country Joy",
                            TrackNumber = 9,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -10,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscId = -1,
                            DiscNumber = 1,
                            Duration = new TimeSpan(0, 0, 2, 10, 0),
                            Name = "Resolution",
                            TrackNumber = 10,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TrackTaro.Shared.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Country = "United States",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Mahavishnu Orchestra",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TrackTaro.Shared.BookletImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("BookletImages");
                });

            modelBuilder.Entity("TrackTaro.Shared.Disc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Discs");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TrackTaro.Shared.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BackImagePath = "",
                            CoverImagePath = "",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "As with the group's previous album, The Inner Mounting Flame, Birds of Fire consists solely of compositions by John McLaughlin. These include the track \"Miles Beyond (Miles Davis)\", which McLaughlin dedicated to his friend and former bandleader.",
                            Label = "",
                            Name = "Birds of Fire",
                            Publisher = "",
                            Type = 0,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Year = 1973
                        });
                });

            modelBuilder.Entity("TrackTaro.Shared.CDDisc", b =>
                {
                    b.HasBaseType("TrackTaro.Shared.Disc");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DiscImagePath = "/fakepath.png",
                            ItemId = -1,
                            Number = 1,
                            Type = 0,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("TrackTaro.Shared.VinylDisc", b =>
                {
                    b.HasBaseType("TrackTaro.Shared.Disc");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ArtistDisc", b =>
                {
                    b.HasOne("TrackTaro.Shared.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackTaro.Shared.Disc", null)
                        .WithMany()
                        .HasForeignKey("DiscsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistTrack", b =>
                {
                    b.HasOne("TrackTaro.Shared.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemArtist", b =>
                {
                    b.HasOne("TrackTaro.Shared.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackTaro.Shared.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Member", b =>
                {
                    b.HasOne("TrackTaro.Shared.Artist", "Artist")
                        .WithMany("Members")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Track", b =>
                {
                    b.HasOne("TrackTaro.Shared.Disc", "Disc")
                        .WithMany("Tracks")
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disc");
                });

            modelBuilder.Entity("TrackTaro.Shared.BookletImage", b =>
                {
                    b.HasOne("TrackTaro.Shared.Item", "Item")
                        .WithMany("BookletImages")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TrackTaro.Shared.Disc", b =>
                {
                    b.HasOne("TrackTaro.Shared.Item", "Item")
                        .WithMany("Discs")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TrackTaro.Shared.Artist", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("TrackTaro.Shared.Disc", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("TrackTaro.Shared.Item", b =>
                {
                    b.Navigation("BookletImages");

                    b.Navigation("Discs");
                });
#pragma warning restore 612, 618
        }
    }
}
